---
// Fixed sidebar navigation with progress indicator

// Main navigation sections
const mainNavItems = [
	{
		href: "#hero",
		label: "Home",
		section: "hero",
		variant: "coral",
	},
	{
		href: "#evolution",
		label: "Experience",
		section: "evolution",
		variant: "mocha",
	},
	{
		href: "#projects",
		label: "Projects",
		section: "projects",
		variant: "blue",
	},
	{
		href: "#contact",
		label: "Contact",
		section: "contact",
		variant: "yellow",
	},
];

// External links (smaller buttons)
const externalLinks = [
	{
		href: "https://github.com/yamshy",
		label: "GitHub",
		variant: "mocha",
	},
	{
		href: "mailto:sajudia@proton.me",
		label: "Email",
		variant: "coral",
	},
];
---

<nav class="sidebar-nav" role="navigation" aria-label="Main navigation">
	<div class="nav-container">
		<!-- Navigation container with organic progress bar -->
		<div class="nav-items-wrapper">
			<!-- Organic progress indicator background -->
			<div class="progress-track">
				<!-- Single progress bar that grows between navigation buttons -->
				<div id="progress-bar" class="progress-bar"></div>
			</div>

			<!-- Main navigation sections -->
			{
				mainNavItems.map((item, index) => (
					<div class={`nav-item ${index === mainNavItems.length - 1 ? "nav-item--last-main" : ""}`}>
						<a
							href={item.href}
							class={`nav-button nav-button--${item.variant}`}
							data-section={item.section}
							aria-label={`Navigate to ${item.label} section`}
						>
							<div class="nav-button-shape">
								<span class="nav-button-text">{item.label}</span>
							</div>
						</a>
					</div>
				))
			}

			<!-- External links (smaller buttons) -->
			{
				externalLinks.map((link, index) => (
					<div class={`nav-item nav-item--external ${index === externalLinks.length - 1 ? "" : ""}`}>
						<a
							href={link.href}
							class={`nav-button nav-button--small nav-button--${link.variant}`}
							target="_blank"
							rel="noopener noreferrer"
							aria-label={`Open ${link.label} in new tab`}
						>
							<div class="nav-button-shape nav-button-shape--small">
								<span class="nav-button-text nav-button-text--small">{link.label}</span>
							</div>
						</a>
					</div>
				))
			}
		</div>
	</div>
</nav>

<style>
	.sidebar-nav {
		display: none;
		position: fixed;
		left: 0;
		top: 0;
		height: 100%;
		width: 10rem; /* 160px */
		z-index: 50;
		pointer-events: none;
	}

	@media (min-width: 1024px) {
		.sidebar-nav {
			display: block;
			width: 12rem; /* 192px */
		}
	}

	.nav-container {
		height: 100%;
		display: flex;
		flex-direction: column;
		align-items: center;
		justify-content: center;
		gap: var(--size-8);
		pointer-events: auto;
	}

	.nav-items-wrapper {
		position: relative;
		display: flex;
		flex-direction: column;
		align-items: flex-start;
	}

	.progress-track {
		position: absolute;
		left: var(--size-3);
		top: 0;
		width: 1px;
		height: 100%;
		border-radius: var(--radius-round);
		overflow: hidden;
		z-index: 0;
	}

	.progress-bar {
		position: absolute;
		top: 0;
		left: 0;
		width: 100%;
		background: linear-gradient(to bottom, var(--brand-coral-primary), var(--brand-mocha-mousse), var(--brand-cool-contrast));
		border-radius: var(--radius-round);
		transition: all var(--animation-duration-normal) var(--ease-out-3);
		height: 0%;
	}

	.nav-item {
		position: relative;
		z-index: 20;
		margin-left: var(--size-8);
		margin-bottom: var(--size-4);
	}

	.nav-item--last-main {
		margin-bottom: var(--size-12);
	}

	.nav-item--external {
		margin-bottom: var(--size-4);
	}

	.nav-button {
		position: relative;
		z-index: 20;
		display: flex;
		align-items: center;
		justify-content: center;
		text-decoration: none;
	}

	.nav-button-shape {
		backdrop-filter: blur(8px);
		border: 1px solid;
		padding: var(--size-3) var(--size-6);
		transition: all var(--animation-duration-slow) var(--ease-out-4);
		border-radius: 50% 50% 50% 50% / 55% 55% 45% 45%;
		animation: cellFloat 6s var(--ease-out-4) infinite;
		will-change: border-radius, transform;
	}

	.nav-button-shape--small {
		padding: var(--size-2) var(--size-4);
	}

	.nav-button-shape:hover {
		border-radius: 45% 55% 55% 45% / 50% 50% 50% 50%;
		animation: cellBreathe 0.4s var(--ease-out-4) forwards;
	}

	/* Color variants */
	.nav-button--coral .nav-button-shape {
		background: var(--brand-glass-coral);
		border-color: rgb(from var(--brand-coral-primary) r g b / 0.3);
		color: var(--brand-coral-primary);
	}

	.nav-button--coral .nav-button-shape:hover {
		background: var(--brand-coral-primary);
		transform: scale(1.05) rotate(1deg);
	}

	.nav-button--coral:hover .nav-button-text {
		color: var(--brand-warm-white);
	}

	.nav-button--mocha .nav-button-shape {
		background: var(--brand-glass-mocha);
		border-color: rgb(from var(--brand-mocha-mousse) r g b / 0.3);
		color: var(--brand-mocha-mousse);
	}

	.nav-button--mocha .nav-button-shape:hover {
		background: var(--brand-mocha-mousse);
		transform: scale(1.05) rotate(-1deg);
	}

	.nav-button--mocha:hover .nav-button-text {
		color: var(--brand-warm-white);
	}

	.nav-button--blue .nav-button-shape {
		background: var(--brand-glass-blue);
		border-color: rgb(from var(--brand-cool-contrast) r g b / 0.3);
		color: var(--brand-cool-contrast);
	}

	.nav-button--blue .nav-button-shape:hover {
		background: var(--brand-cool-contrast);
		transform: scale(1.05) rotate(1deg);
	}

	.nav-button--blue:hover .nav-button-text {
		color: var(--brand-warm-white);
	}

	.nav-button--yellow .nav-button-shape {
		background: var(--brand-glass-yellow);
		border-color: rgb(from var(--brand-accent-yellow) r g b / 0.3);
		color: var(--brand-text-dark);
	}

	.nav-button--yellow .nav-button-shape:hover {
		background: var(--brand-accent-yellow);
		transform: scale(1.05) rotate(-1deg);
	}

	.nav-button--yellow:hover .nav-button-text {
		color: var(--brand-text-dark);
	}

	.nav-button--small .nav-button-shape:hover {
		transform: scale(1.1);
	}

	.nav-button-text {
		font-size: var(--font-size-0);
		font-weight: var(--font-weight-5);
		transition: colors var(--animation-duration-normal);
	}

	.nav-button-text--small {
		font-size: var(--font-size-00);
		font-weight: var(--font-weight-5);
	}

	.nav-button.active .nav-button-shape {
		background: var(--brand-coral-primary) !important;
		transform: scale(1.05);
	}

	.nav-button.active .nav-button-text {
		color: var(--brand-warm-white) !important;
	}

	/* Mobile responsive */
	@media (max-width: 1024px) {
		.sidebar-nav {
			display: none;
		}
	}
</style>

<script>
	// Progress bar and navigation functionality
	function updateProgress() {
		const progressBar = document.getElementById("progress-bar");
		const allNavElements = document.querySelectorAll(".nav-button");

		if (!progressBar || allNavElements.length === 0) return;

		const scrollTop = window.pageYOffset;

		// Define only main navigation sections (not external links)
		const navOrder = [
			{
				selector: '.nav-button[data-section="hero"]',
				target: "#hero",
			},
			{
				selector: '.nav-button[data-section="evolution"]',
				target: "#evolution",
			},
			{
				selector: '.nav-button[data-section="projects"]',
				target: "#projects",
			},
			{
				selector: '.nav-button[data-section="contact"]',
				target: "#contact",
			},
		];

		// Calculate progress based on scroll position relative to navigation targets
		let progressPercentage = 0;
		let activeElement: HTMLElement | null = null;

		navOrder.forEach((navItem, index) => {
			const element = document.querySelector(navItem.selector);
			if (!element) return;

			const targetElement = document.querySelector(navItem.target);
			if (!targetElement) return;

			const targetPosition = (targetElement as HTMLElement).offsetTop;
			const nextTargetElement = navOrder[index + 1] ? document.querySelector(navOrder[index + 1].target) : null;
			const nextTargetPosition = nextTargetElement ? (nextTargetElement as HTMLElement).offsetTop : document.documentElement.scrollHeight;

			// Check if we're in this section (between current and next target)
			// Use viewport height offset for better UX
			const viewportOffset = window.innerHeight * 0.3; // 30% of viewport height
			
			if (scrollTop >= targetPosition - viewportOffset && scrollTop < nextTargetPosition - viewportOffset) {
				// Calculate progress within this section
				const sectionProgress = Math.min((scrollTop - (targetPosition - viewportOffset)) / ((nextTargetPosition - targetPosition) || 1), 1);
				progressPercentage = ((index + sectionProgress) / navOrder.length) * 100;
				activeElement = element as HTMLElement;
			}
		});

		// Update progress bar to align with center of active button
		if (activeElement) {
			const activeButton = (activeElement as HTMLElement).querySelector(".nav-button-shape");
			if (activeButton) {
				const buttonRect = activeButton.getBoundingClientRect();
				const navContainer = document.querySelector(".nav-items-wrapper");
				if (navContainer) {
					const containerRect = navContainer.getBoundingClientRect();
					const relativeTop = buttonRect.top - containerRect.top;
					const buttonCenter = relativeTop + buttonRect.height / 2;
					const containerHeight = containerRect.height;
					const centerPercentage = (buttonCenter / containerHeight) * 100;

					// Set progress bar to extend to the center of the active button
					progressBar.style.height = `${Math.min(centerPercentage, 100)}%`;
				}
			}
		} else {
			// Fallback to percentage-based approach
			progressBar.style.height = `${Math.min(progressPercentage, 100)}%`;
		}

		// Update active states
		allNavElements.forEach((element) => {
			(element as HTMLElement).classList.remove("active");
		});

		if (activeElement) {
			(activeElement as HTMLElement).classList.add("active");
		}
	}

	// Smooth scroll for navigation links
	document.addEventListener("DOMContentLoaded", () => {
		const navLinks = document.querySelectorAll(".nav-button");

		navLinks.forEach((link) => {
			link.addEventListener("click", (e) => {
				e.preventDefault();
				const href = link.getAttribute("href");
				if (!href || href.startsWith("http") || href.startsWith("mailto:")) return;

				const targetId = href.substring(1);
				const targetElement = document.getElementById(targetId);

				if (targetElement) {
					targetElement.scrollIntoView({
						behavior: "smooth",
						block: "start",
					});
				}
			});
		});

		// Update progress on scroll
		window.addEventListener("scroll", updateProgress);
		updateProgress(); // Initial call
	});
</script>