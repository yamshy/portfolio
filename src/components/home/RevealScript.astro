<script>
  const revealNodes = Array.from(document.querySelectorAll('[data-reveal]'));

  if (revealNodes.length > 0) {
    const rootElement = document.documentElement;
    rootElement.removeAttribute('data-reveal-state');

    const reduceMotionQuery =
      'matchMedia' in window
        ? window.matchMedia('(prefers-reduced-motion: reduce)')
        : null;
    const automationPattern =
      /Headless|Playwright|Puppeteer|Chrome-Lighthouse|Speed\sInsights|Page Speed|Checkly|Screener|HeadlessShell/i;
    const userAgent = navigator?.userAgent ?? '';
    const isAutomationContext =
      (typeof navigator !== 'undefined' && navigator.webdriver) ||
      automationPattern.test(userAgent);

    if (
      reduceMotionQuery?.matches ||
      !('IntersectionObserver' in window) ||
      isAutomationContext
    ) {
      revealNodes.forEach((node) => {
        node.classList.add('is-revealed', 'is-reveal-instant');
      });
    } else {
      const observer = new IntersectionObserver(
        (entries) => {
          entries.forEach((entry) => {
            if (entry.isIntersecting) {
              entry.target.classList.add('is-revealed');
              observer.unobserve(entry.target);
            }
          });
        },
        {
          // Lower threshold prevents tall sections (like Projects) from
          // staying invisible for too long on mobile before the reveal runs.
          threshold: 0,
          rootMargin: '0px 0px -6% 0px',
        },
      );

      const revealIfVisible = (node: Element) => {
        const rect = node.getBoundingClientRect();
        if (rect.bottom >= 0 && rect.top <= window.innerHeight) {
          node.classList.add('is-revealed');
          observer.unobserve(node);
        }
      };

      revealNodes.forEach((node) => observer.observe(node));

      const activateReveals = () => {
        if (rootElement.dataset.revealState === 'active') {
          return;
        }

        revealNodes.forEach(revealIfVisible);

        requestAnimationFrame(() => {
          rootElement.dataset.revealState = 'active';
        });
      };

      if (window.scrollY > 0) {
        activateReveals();
      } else {
        window.addEventListener('scroll', activateReveals, {
          once: true,
          passive: true,
        });
      }
    }
  }
</script>
