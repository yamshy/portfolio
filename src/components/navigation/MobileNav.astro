---
import { mainNavItems, externalLinks } from './navLinks';
---

<!-- Mobile hamburger navigation -->
<div class="mobile-nav">
  <button
    id="mobile-nav-button"
    class="hamburger u-glass u-glass--mocha u-border-mocha-20"
    aria-label="Open menu"
    aria-controls="mobile-menu"
    aria-expanded="false"
  >
    <span class="hamburger-bars" aria-hidden="true"></span>
  </button>

  <div id="mobile-menu" class="menu-overlay" hidden>
    <div class="backdrop" data-backdrop></div>
    <nav class="menu-panel u-glass u-glass--mocha u-border-mocha-20" role="navigation" aria-label="Mobile">
      <ul class="menu-list">
        {
          mainNavItems.map((item) => (
            <li class="menu-item">
              <a
                href={item.href}
                class={`menu-link ${item.style}`}
                data-section={item.section}
              >
                <span class="menu-link-label">{item.label}</span>
              </a>
            </li>
          ))
        }
      </ul>

      <div class="menu-divider" aria-hidden="true"></div>

      <ul class="menu-list menu-list--external">
        {
          externalLinks.map((link) => (
            <li class="menu-item menu-item--external">
              <a
                href={link.href}
                target="_blank"
                rel="noopener noreferrer"
                class={`menu-link menu-link--external ${link.style}`}
              >
                <span class="menu-link-label">{link.label}</span>
              </a>
            </li>
          ))
        }
      </ul>
    </nav>
  </div>
</div>

<style>
  .mobile-nav {
    position: fixed;
    top: calc(env(safe-area-inset-top) + var(--sp-3));
    right: calc(env(safe-area-inset-right) + var(--sp-3));
    z-index: var(--z-nav);
  }

  /* Hide on desktop, show on mobile */
  @media (min-width: 1024px) {
    .mobile-nav {
      display: none;
    }
  }

  .hamburger {
    display: inline-flex;
    align-items: center;
    justify-content: center;
    width: 48px;
    height: 48px;
    border-radius: 999px;
    background: var(--glass-mocha);
    border: 1px solid color-mix(in oklab, var(--mocha) 20%, transparent);
    box-shadow: var(--shadow-lg);
    cursor: pointer;
    transition: transform 200ms var(--ease-3), box-shadow 200ms var(--ease-3);
  }

  .hamburger:focus-visible {
    outline: 2px solid var(--accent-yellow);
    outline-offset: 2px;
  }

  .hamburger:hover {
    box-shadow: var(--shadow-xl);
    transform: translateY(-1px);
  }

  .hamburger-bars,
  .hamburger-bars::before,
  .hamburger-bars::after {
    content: '';
    display: block;
    width: 22px;
    height: 2px;
    background: var(--text-dark);
    border-radius: 2px;
    position: relative;
    transition: transform 200ms var(--ease-3), opacity 200ms var(--ease-3);
  }

  .hamburger-bars::before {
    position: absolute;
    top: -7px;
    left: 0;
  }
  .hamburger-bars::after {
    position: absolute;
    top: 7px;
    left: 0;
  }

  /* Open state transforms to an “X” */
  .hamburger[aria-expanded='true'] .hamburger-bars {
    transform: rotate(45deg);
  }
  .hamburger[aria-expanded='true'] .hamburger-bars::before {
    transform: rotate(90deg) translateX(0);
    top: 0;
  }
  .hamburger[aria-expanded='true'] .hamburger-bars::after {
    opacity: 0;
  }

  /* Overlay + panel */
  .menu-overlay[hidden] {
    display: none;
  }

  .menu-overlay {
    position: fixed;
    inset: 0;
    display: grid;
    place-items: center;
  }

  .backdrop {
    position: absolute;
    inset: 0;
    background: color-mix(in oklab, var(--glass-dark) 60%, var(--warm-bg) 10%);
    -webkit-backdrop-filter: blur(var(--blur-20));
    backdrop-filter: blur(var(--blur-20));
  }

  .menu-panel {
    position: relative;
    width: min(92vw, 420px);
    max-height: 80vh;
    border-radius: var(--r-xl);
    padding: var(--sp-8);
    background: color-mix(in oklab, var(--warm-bg) 80%, var(--glass-mocha) 20%);
    border: 1px solid color-mix(in oklab, var(--mocha) 25%, transparent);
    box-shadow: 0 10px 40px color-mix(in oklab, var(--text-dark) 15%, transparent);
    transform: translateY(8px);
    opacity: 0;
    transition: transform 220ms var(--ease-3), opacity 220ms var(--ease-3);
  }

  .menu-overlay[data-open='true'] .menu-panel {
    transform: translateY(0);
    opacity: 1;
  }

  .menu-list {
    list-style: none;
    margin: 0;
    padding: 0;
    display: grid;
    gap: var(--sp-3);
  }

  .menu-list--external {
    gap: var(--sp-2);
  }

  .menu-divider {
    height: 1px;
    margin: var(--sp-6) 0;
    background: color-mix(in oklab, var(--mocha) 20%, transparent);
  }

  .menu-item {}

  .menu-link {
    display: flex;
    align-items: center;
    justify-content: center;
    min-height: 48px;
    padding: var(--sp-3) var(--sp-4);
    text-decoration: none;
    border: 1px solid;
    border-radius: 999px;
    transition: transform 200ms var(--ease-3), background 200ms var(--ease-3), color 200ms var(--ease-3);
  }

  .menu-link:focus-visible {
    outline: 2px solid var(--accent-yellow);
    outline-offset: 2px;
  }

  .menu-link-label {
    font-weight: 600;
    letter-spacing: 0.02em;
    color: var(--text-dark);
  }

  .menu-link--external .menu-link-label {
    font-weight: 500;
    font-size: 0.95rem;
  }

  /* Reuse the same color utility classes defined in SidebarNav */
  .bg-glass-coral { background: var(--glass-coral); }
  .bg-glass-mocha { background: var(--glass-mocha); }
  .bg-glass-yellow { background: var(--glass-yellow); }
  .bg-glass-blue { background: var(--glass-blue); }

  .border-coral { border-color: color-mix(in oklab, var(--coral), transparent 70%); }
  .border-mocha { border-color: color-mix(in oklab, var(--mocha), transparent 70%); }
  .border-blue { border-color: color-mix(in oklab, var(--blue), transparent 70%); }
  .border-accent-yellow { border-color: color-mix(in oklab, var(--accent-yellow), transparent 70%); }

  .text-coral { color: var(--coral); }
  .text-mocha { color: var(--mocha); }
  .text-blue { color: var(--blue); }
  .text-text-dark { color: var(--text-dark); }

  .hover\:bg-coral:hover { background: var(--coral); }
  .hover\:bg-mocha:hover { background: var(--mocha); }
  .hover\:bg-blue:hover { background: var(--blue); }
  .hover\:bg-accent-yellow:hover { background: var(--accent-yellow); }
  .hover\:rotate-1:hover { transform: rotate(1deg); }
  .hover\:-rotate-1:hover { transform: rotate(-1deg); }

  .hover\:bg-coral:hover .menu-link-label,
  .hover\:bg-mocha:hover .menu-link-label,
  .hover\:bg-blue:hover .menu-link-label,
  .hover\:bg-accent-yellow:hover .menu-link-label {
    color: var(--warm-bg);
  }
</style>

<script>
  // Menu state and accessibility
  const btn = document.getElementById('mobile-nav-button');
  const overlay = document.getElementById('mobile-menu');

  const openMenu = () => {
    if (!btn || !overlay) return;
    btn.setAttribute('aria-expanded', 'true');
    btn.setAttribute('aria-label', 'Close menu');
    overlay.hidden = false;
    overlay.setAttribute('data-open', 'true');
    document.body.style.overflow = 'hidden';
  };

  const closeMenu = () => {
    if (!btn || !overlay) return;
    btn.setAttribute('aria-expanded', 'false');
    btn.setAttribute('aria-label', 'Open menu');
    overlay.removeAttribute('data-open');
    overlay.hidden = true;
    document.body.style.overflow = '';
  };

  const toggleMenu = () => {
    const expanded = btn?.getAttribute('aria-expanded') === 'true';
    if (expanded) closeMenu();
    else openMenu();
  };

  document.addEventListener('DOMContentLoaded', () => {
    if (!btn || !overlay) return;

    btn.addEventListener('click', toggleMenu);

    // Close on backdrop click
    overlay.addEventListener('click', (e) => {
      const target = e.target as HTMLElement;
      if (target && target.hasAttribute('data-backdrop')) {
        closeMenu();
      }
    });

    // Smooth scroll for in-page anchors, and close when navigating
    overlay.querySelectorAll('a').forEach((anchor) => {
      anchor.addEventListener('click', (e) => {
        const href = (anchor as HTMLAnchorElement).getAttribute('href') || '';
        if (href.startsWith('#')) {
          e.preventDefault();
          const targetId = href.substring(1);
          const el = document.getElementById(targetId);
          if (el) {
            el.scrollIntoView({ behavior: 'smooth', block: 'start' });
          }
          closeMenu();
        } else {
          // external link; let it open then close menu
          closeMenu();
        }
      });
    });

    // ESC to close
    document.addEventListener('keydown', (e) => {
      if (e.key === 'Escape') {
        closeMenu();
      }
    });
  });
</script>