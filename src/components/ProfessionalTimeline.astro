---
import type { TimelinePhase } from '../types/timeline';

export interface Props {
  class?: string;
}

const { class: className } = Astro.props;

// Timeline data - Updated experience phases
const timelinePhases: TimelinePhase[] = [
  {
    id: 'education-biology',
    period: '2018-2021',
    title: 'Education & Pure Biology',
    description: 'Began as a molecular and cellular biology research associate, conducting bench work, experimental design, and data analysis.',
    expandedDescription: 'Built the foundation of analytical precision and systematic problem-solving that would later define my technical approach. Specialized in protein purification, cell culture techniques, and quantitative analysis methods. Developed expertise in troubleshooting complex experimental protocols and maintaining rigorous documentation standards.',
    skills: ['Molecular Biology', 'Bench Work', 'Research', 'Data Analysis', 'Protocol Development'],
    themeColor: 'coral',
    links: [
      {
        label: 'Research Publications',
        url: '#publications',
        type: 'internal'
      }
    ]
  },
  {
    id: 'hybrid-transition',
    period: '2021-2022',
    title: 'Hybrid Transition',
    description: 'Recognized inefficiencies in manual processes and began applying programming to biological workflows.',
    expandedDescription: 'This natural progression from data analysis to automation marked the beginning of my technical evolution. Developed Python scripts for data processing, implemented automated reporting systems, and created workflow optimization tools that reduced manual processing time by 60%.',
    skills: ['Automation', 'Programming', 'Workflows', 'Python', 'Data Processing'],
    themeColor: 'mocha',
    links: [
      {
        label: 'Automation Tools',
        url: 'https://github.com/yamshy/bio-automation',
        type: 'external'
      }
    ]
  },
  {
    id: 'technical-leadership',
    period: '2022-2024',
    title: 'Technical Leadership',
    description: 'Transitioned into technical leadership, managing infrastructure, bioinformatics pipelines, and internal web development.',
    expandedDescription: 'This role uniquely positioned me to bridge domain expertise with technical implementation, creating solutions that truly served the research needs. Led a team of 5 researchers, implemented CI/CD pipelines for bioinformatics workflows, and developed internal web applications that streamlined laboratory operations.',
    skills: ['Infrastructure', 'Bioinformatics', 'Web Development', 'Team Leadership', 'CI/CD'],
    themeColor: 'mocha'
  },
  {
    id: 'current-evolution',
    period: '2024+',
    title: 'Current Evolution',
    description: 'Now specializing across DevOps, system administration, and data engineering, applying analytical precision to building scalable infrastructure.',
    expandedDescription: 'Managing systems, and designing data pipelines with the same methodical approach learned in laboratory research. Currently focusing on Kubernetes orchestration, cloud-native architectures, and building resilient data processing systems that can handle complex scientific workloads.',
    skills: ['DevOps', 'System Admin', 'Data Engineering', 'Infrastructure', 'Kubernetes', 'Cloud Architecture'],
    themeColor: 'blue',
    isCurrentRole: true,
    links: [
      {
        label: 'Homelab Infrastructure',
        url: 'https://github.com/yamshy/homelab',
        type: 'external'
      }
    ]
  }
];
---

<section id="evolution" class:list={["timeline-section", className]}>
  <div class="timeline-container">
    <!-- Section header -->
    <header class="timeline-header">
      <h2 class="timeline-title">
        Professional <span class="title-accent">Evolution</span>
      </h2>
      <p class="timeline-description">
        From molecular biology research to cloud architecture - a
        journey of applying analytical thinking and systematic
        approaches to increasingly complex technical challenges
      </p>
    </header>

    <!-- Timeline with SVG backbone -->
    <div class="timeline-wrapper">
      <svg class="timeline-svg" viewBox="0 0 800 600" aria-hidden="true">
        <defs>
          <linearGradient id="timelineGradient" x1="0%" y1="0%" x2="100%" y2="0%">
            <stop offset="0%" style="stop-color:var(--coral);stop-opacity:1" />
            <stop offset="50%" style="stop-color:var(--mocha);stop-opacity:1" />
            <stop offset="100%" style="stop-color:var(--blue);stop-opacity:1" />
          </linearGradient>
        </defs>
        <path 
          class="timeline-path"
          d="M 50 100 Q 200 150 350 200 T 650 300 T 750 500"
          stroke="url(#timelineGradient)"
          stroke-width="2"
          fill="none"
          stroke-dasharray="1000"
          stroke-dashoffset="1000"
        />
      </svg>
      
      <ol class="timeline-list" role="list">
        {timelinePhases.map((phase, index) => (
          <li class="timeline-item" data-theme={phase.themeColor}>
            <article class="timeline-phase">
              <!-- Timeline marker - Glass circle -->
              <div class="timeline-marker" aria-hidden="true">
                <div class="marker-glass"></div>
              </div>

              <!-- Phase content -->
              <div class="phase-content">
                <!-- Phase header - clickable trigger -->
                <button
                  class="phase-trigger"
                  type="button"
                  aria-expanded="false"
                  aria-controls={`phase-details-${phase.id}`}
                  data-phase-id={phase.id}
                >
                  <header class="phase-header">
                    <div class="phase-period">
                      <time datetime={phase.period}>{phase.period}</time>
                      {phase.isCurrentRole && (
                        <span class="current-badge" aria-label="Current position">Current</span>
                      )}
                    </div>
                    <h3 class="phase-title">{phase.title}</h3>
                    <p class="phase-summary">{phase.description}</p>
                  </header>
                  
                  <!-- Expand/collapse indicator -->
                  <div class="expand-indicator" aria-hidden="true">
                    <svg class="expand-icon" width="24" height="24" viewBox="0 0 24 24" fill="none">
                      <path d="M6 9l6 6 6-6" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                    </svg>
                  </div>
                </button>

                <!-- Expandable details -->
                <div 
                  class="phase-details"
                  id={`phase-details-${phase.id}`}
                  aria-hidden="true"
                  data-phase-details
                >
                  {phase.expandedDescription && (
                    <p class="phase-expanded-description">{phase.expandedDescription}</p>
                  )}
                  
                  <!-- Skills tags -->
                  <div class="skills-container">
                    <h4 class="skills-label">Key Skills & Technologies</h4>
                    <ul class="skills-list" role="list">
                      {phase.skills.map(skill => (
                        <li class="skill-tag">{skill}</li>
                      ))}
                    </ul>
                  </div>

                  <!-- Links -->
                  {phase.links && phase.links.length > 0 && (
                    <div class="links-container">
                      <h4 class="links-label">Related Links</h4>
                      <ul class="links-list" role="list">
                        {phase.links.map(link => (
                          <li>
                            <a 
                              href={link.url}
                              class="phase-link"
                              target={link.type === 'external' ? '_blank' : undefined}
                              rel={link.type === 'external' ? 'noopener noreferrer' : undefined}
                            >
                              {link.label}
                              {link.type === 'external' && (
                                <svg class="external-icon" width="16" height="16" viewBox="0 0 24 24" fill="none" aria-hidden="true">
                                  <path d="M7 17L17 7M17 7H7M17 7V17" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                                </svg>
                              )}
                            </a>
                          </li>
                        ))}
                      </ul>
                    </div>
                  )}
                </div>
              </div>
            </article>
          </li>
        ))}
      </ol>
    </div>
  </div>
</section>

<style>
  @layer components {
    .timeline-section {
      padding: var(--space-section) 0;
      position: relative;
    }

    .timeline-container {
      max-width: var(--container-max-width);
      margin: 0 auto;
      padding: 0 var(--container-padding);
    }

    .timeline-header {
      text-align: center;
      margin-bottom: var(--space-component);
    }

    .timeline-title {
      font-size: var(--font-size-h1);
      font-weight: var(--font-weight-7);
      line-height: var(--line-height-heading);
      margin-bottom: var(--size-4);
    }

    .title-accent {
      color: var(--brand);
    }

    .timeline-description {
      font-size: var(--font-size-body-large);
      color: var(--text-2);
      max-width: var(--content-width-wide);
      margin: 0 auto;
      line-height: var(--line-height-body);
    }

    /* Timeline Structure with SVG backbone */
    .timeline-wrapper {
      position: relative;
      max-width: 800px;
      margin: 0 auto;
      height: 600px;
    }

    .timeline-svg {
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      z-index: 0;
    }

    .timeline-path {
      animation: drawPath 3s ease-in-out forwards;
    }

    @keyframes drawPath {
      to {
        stroke-dashoffset: 0;
      }
    }

    .timeline-list {
      position: relative;
      z-index: 1;
    }

    .timeline-item {
      position: relative;
      margin-bottom: var(--size-8);
      
      &:nth-child(odd) {
        text-align: right;
        
        .phase-content {
          margin-right: calc(50% + 2rem);
        }
        
        .timeline-marker {
          right: calc(50% - 1rem);
        }
      }
      
      &:nth-child(even) {
        text-align: left;
        
        .phase-content {
          margin-left: calc(50% + 2rem);
        }
        
        .timeline-marker {
          left: calc(50% - 1rem);
        }
      }

      @media (--mobile-only) {
        text-align: left;
        
        &:nth-child(odd) .phase-content,
        &:nth-child(even) .phase-content {
          margin-left: 4rem;
          margin-right: 0;
        }
        
        &:nth-child(odd) .timeline-marker,
        &:nth-child(even) .timeline-marker {
          left: 1rem;
          right: auto;
        }
      }
    }

    /* Timeline Markers */
    .timeline-marker {
      position: absolute;
      top: 1.5rem;
      z-index: 2;
    }

    .marker-glass {
      width: 2rem;
      height: 2rem;
      border-radius: 50%;
      background: var(--glass-coral);
      backdrop-filter: blur(12px);
      border: 1px solid color-mix(in oklab, var(--coral), transparent 80%);
      box-shadow: var(--shadow-lg-warm);
      transition: all var(--dur-med) var(--ease-organic);
      transform: scale(0.95);
      
      /* Theme-based colors */
      .timeline-item[data-theme="coral"] & {
        background: var(--glass-coral);
        border: 1px solid color-mix(in oklab, var(--coral), transparent 80%);
      }
      
      .timeline-item[data-theme="mocha"] & {
        background: var(--glass-mocha);
        border: 1px solid color-mix(in oklab, var(--mocha), transparent 80%);
      }
      
      .timeline-item[data-theme="blue"] & {
        background: var(--glass-blue);
        border: 1px solid color-mix(in oklab, var(--blue), transparent 80%);
      }
      
      .timeline-item[data-theme="yellow"] & {
        background: var(--glass-yellow);
        border: 1px solid color-mix(in oklab, var(--accent-yellow), transparent 80%);
      }
    }

    .timeline-phase:hover .marker-glass {
      transform: scale(1);
    }

    /* Phase Content - Glassmorphism */
    .phase-content {
      background: var(--glass-mocha);
      backdrop-filter: blur(20px);
      border: 1px solid color-mix(in oklab, var(--mocha), transparent 80%);
      border-radius: var(--radius-organic);
      box-shadow: var(--shadow-lg-warm);
      overflow: hidden;
      transition: all var(--dur-med) var(--ease-organic);
      
      &:hover {
        box-shadow: var(--shadow-hover);
        transform: translateY(-4px);
      }
    }

    /* Backdrop-filter fallback */
    @supports not (backdrop-filter: blur(12px)) {
      .phase-content {
        background: var(--glass-fallback-primary);
      }
    }

    /* Phase Trigger Button */
    .phase-trigger {
      width: 100%;
      padding: var(--size-4);
      text-align: inherit;
      background: none;
      border: none;
      cursor: pointer;
      display: flex;
      flex-direction: column;
      gap: var(--size-3);
      transition: background-color var(--duration-fast) var(--ease-glass);
      
      &:hover {
        background: color-mix(in oklab, var(--glass-bg-secondary), transparent 50%);
      }
      
      &:focus-visible {
        outline: var(--border-focus);
        outline-offset: -2px;
      }
      
      &[aria-expanded="true"] {
        .expand-icon {
          transform: rotate(180deg);
        }
      }
    }

    .phase-header {
      display: flex;
      flex-direction: column;
      gap: var(--size-2);
      align-items: flex-start;
      
      .timeline-item:nth-child(odd) & {
        align-items: flex-end;
        
        @media (--mobile-only) {
          align-items: flex-start;
        }
      }
    }

    .phase-period {
      display: flex;
      align-items: center;
      gap: var(--size-2);
      font-size: var(--font-size-small);
      font-weight: var(--font-weight-6);
      color: var(--text-2);
      
      time {
        padding: var(--size-1) var(--size-2);
        background: var(--surface-2);
        border-radius: var(--radius-button);
      }
    }

    .current-badge {
      padding: var(--size-1) var(--size-2);
      background: var(--brand);
      color: var(--surface-1);
      border-radius: var(--radius-button);
      font-size: var(--font-size-00);
      font-weight: var(--font-weight-6);
      text-transform: uppercase;
      letter-spacing: var(--letter-spacing-wide);
    }

    .phase-title {
      font-size: var(--font-size-h3);
      font-weight: var(--font-weight-6);
      color: var(--text-1);
      margin: 0;
    }

    .phase-summary {
      font-size: var(--font-size-body);
      color: var(--text-2);
      line-height: var(--line-height-body);
      margin: 0;
    }

    .expand-indicator {
      align-self: center;
      margin-top: var(--size-2);
    }

    .expand-icon {
      color: var(--text-2);
      transition: transform var(--duration-medium) var(--ease-glass);
    }

    /* Expandable Details */
    .phase-details {
      padding: 0 var(--size-4) var(--size-4);
      border-top: 1px solid var(--glass-border);
      background: color-mix(in oklab, var(--glass-bg-secondary), transparent 50%);
      
      /* Collapsed state */
      max-height: 0;
      overflow: hidden;
      opacity: 0;
      transition: 
        max-height var(--duration-slow) var(--ease-glass),
        opacity var(--duration-medium) var(--ease-glass),
        padding var(--duration-medium) var(--ease-glass);
      
      /* Expanded state */
      &[aria-hidden="false"] {
        max-height: 1000px;
        opacity: 1;
        padding: var(--size-4);
      }
    }

    .phase-expanded-description {
      font-size: var(--font-size-body);
      color: var(--text-1);
      line-height: var(--line-height-body);
      margin-bottom: var(--size-4);
    }

    .skills-container,
    .links-container {
      margin-bottom: var(--size-4);
      
      &:last-child {
        margin-bottom: 0;
      }
    }

    .skills-label,
    .links-label {
      font-size: var(--font-size-small);
      font-weight: var(--font-weight-6);
      color: var(--text-2);
      margin-bottom: var(--size-2);
      text-transform: uppercase;
      letter-spacing: var(--letter-spacing-wide);
    }

    .skills-list {
      display: flex;
      flex-wrap: wrap;
      gap: var(--size-2);
    }

    .skill-tag {
      padding: var(--size-1) var(--size-2);
      background: var(--surface-2);
      color: var(--text-1);
      border-radius: var(--radius-button);
      font-size: var(--font-size-small);
      font-weight: var(--font-weight-5);
      border: 1px solid var(--glass-border);
    }

    .links-list {
      display: flex;
      flex-direction: column;
      gap: var(--size-2);
    }

    .phase-link {
      display: inline-flex;
      align-items: center;
      gap: var(--size-1);
      color: var(--link);
      font-weight: var(--font-weight-5);
      text-decoration: none;
      transition: color var(--duration-fast) var(--ease-glass);
      
      &:hover {
        color: var(--link-hover);
      }
      
      &:focus-visible {
        outline: var(--border-focus);
        outline-offset: 2px;
        border-radius: var(--radius-2);
      }
    }

    .external-icon {
      opacity: 0.7;
      transition: opacity var(--duration-fast) var(--ease-glass);
      
      .phase-link:hover & {
        opacity: 1;
      }
    }

    /* Reduced Motion */
    @media (--motionNotOK) {
      .phase-content,
      .marker-dot,
      .expand-icon,
      .phase-details {
        transition: none;
      }
      
      .phase-content:hover {
        transform: none;
      }
      
      .phase-details[aria-hidden="false"] {
        max-height: none;
      }
    }

    /* High Contrast */
    @media (--highContrast) {
      .phase-content {
        background: var(--surface-1);
        border: 2px solid var(--text-1);
      }
      
      .marker-dot {
        border-width: 2px;
        border-color: var(--text-1);
      }
      
      .skill-tag {
        border-color: var(--text-1);
      }
    }

    /* Print Styles */
    @media print {
      .timeline-line {
        display: none;
      }
      
      .timeline-marker {
        display: none;
      }
      
      .phase-details {
        max-height: none !important;
        opacity: 1 !important;
        padding: var(--size-2) 0 !important;
      }
      
      .expand-indicator {
        display: none;
      }
    }
  }
</style>

<script>
  class TimelineManager {
    private timeline: HTMLElement;
    private triggers: NodeListOf<HTMLButtonElement>;
    private currentFocusIndex: number = 0;

    constructor(timeline: HTMLElement) {
      this.timeline = timeline;
      this.triggers = timeline.querySelectorAll('.phase-trigger');
      this.init();
    }

    private init(): void {
      // Add event listeners to all triggers
      this.triggers.forEach((trigger, index) => {
        trigger.addEventListener('click', this.handleToggle.bind(this, index));
        trigger.addEventListener('keydown', this.handleKeydown.bind(this, index));
      });

      // Set up intersection observer for scroll-based animations
      this.setupScrollAnimations();
    }

    private handleToggle(index: number): void {
      const trigger = this.triggers[index];
      const isExpanded = trigger.getAttribute('aria-expanded') === 'true';
      const details = document.getElementById(trigger.getAttribute('aria-controls')!);
      
      if (!details) return;

      // Toggle expanded state
      const newExpanded = !isExpanded;
      trigger.setAttribute('aria-expanded', newExpanded.toString());
      details.setAttribute('aria-hidden', (!newExpanded).toString());

      // Announce to screen readers
      this.announceToggle(trigger, newExpanded);
    }

    private handleKeydown(index: number, event: KeyboardEvent): void {
      switch (event.key) {
        case 'ArrowDown':
          event.preventDefault();
          this.focusNext();
          break;
        case 'ArrowUp':
          event.preventDefault();
          this.focusPrevious();
          break;
        case 'Home':
          event.preventDefault();
          this.focusFirst();
          break;
        case 'End':
          event.preventDefault();
          this.focusLast();
          break;
        case 'Escape':
          event.preventDefault();
          this.collapseAll();
          break;
      }
    }

    private focusNext(): void {
      this.currentFocusIndex = Math.min(this.currentFocusIndex + 1, this.triggers.length - 1);
      this.triggers[this.currentFocusIndex].focus();
    }

    private focusPrevious(): void {
      this.currentFocusIndex = Math.max(this.currentFocusIndex - 1, 0);
      this.triggers[this.currentFocusIndex].focus();
    }

    private focusFirst(): void {
      this.currentFocusIndex = 0;
      this.triggers[0].focus();
    }

    private focusLast(): void {
      this.currentFocusIndex = this.triggers.length - 1;
      this.triggers[this.currentFocusIndex].focus();
    }

    private collapseAll(): void {
      this.triggers.forEach(trigger => {
        trigger.setAttribute('aria-expanded', 'false');
        const details = document.getElementById(trigger.getAttribute('aria-controls')!);
        if (details) {
          details.setAttribute('aria-hidden', 'true');
        }
      });
    }

    private announceToggle(trigger: HTMLButtonElement, isExpanded: boolean): void {
      const phaseTitle = trigger.querySelector('.phase-title')?.textContent || 'Phase';
      const message = isExpanded ? 
        `${phaseTitle} details expanded` : 
        `${phaseTitle} details collapsed`;
      
      // Create temporary announcement for screen readers
      const announcement = document.createElement('div');
      announcement.setAttribute('aria-live', 'polite');
      announcement.setAttribute('aria-atomic', 'true');
      announcement.className = 'sr-only';
      announcement.textContent = message;
      
      document.body.appendChild(announcement);
      setTimeout(() => document.body.removeChild(announcement), 1000);
    }

    private setupScrollAnimations(): void {
      if ('IntersectionObserver' in window && window.matchMedia('(prefers-reduced-motion: no-preference)').matches) {
        const observer = new IntersectionObserver(
          (entries) => {
            entries.forEach(entry => {
              if (entry.isIntersecting) {
                entry.target.classList.add('in-view');
              }
            });
          },
          { threshold: 0.1, rootMargin: '-10% 0px' }
        );

        // Observe all timeline items
        this.timeline.querySelectorAll('.timeline-item').forEach(item => {
          observer.observe(item);
        });
      }
    }
  }

  // Initialize timeline when DOM is ready
  document.addEventListener('DOMContentLoaded', () => {
    const timeline = document.getElementById('evolution');
    if (timeline) {
      new TimelineManager(timeline);
    }
  });

  // Add screen reader only class for announcements
  const style = document.createElement('style');
  style.textContent = `
    .sr-only {
      position: absolute;
      width: 1px;
      height: 1px;
      padding: 0;
      margin: -1px;
      overflow: hidden;
      clip: rect(0, 0, 0, 0);
      white-space: nowrap;
      border: 0;
    }
  `;
  document.head.appendChild(style);
</script>

