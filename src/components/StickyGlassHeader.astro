---
export interface Props {
  class?: string;
}

const { class: className } = Astro.props;

// Navigation items - Updated section headers
const navItems = [
  { href: "#hero", label: "Home" },
  { href: "#evolution", label: "Professional Evolution" },
  { href: "#projects", label: "Featured Work" },
  { href: "#skills", label: "Technical Expertise" },
  { href: "#contact", label: "Let's Build Together" },
];
---

<header class:list={["glass-header", className]} role="banner">
  <nav class="glass-nav" aria-label="Main navigation">
    <ul class="nav-list" role="list">
      {navItems.map((item) => (
        <li class="nav-item">
          <a 
            href={item.href} 
            class="nav-link"
            aria-label={`Navigate to ${item.label} section`}
          >
            {item.label}
          </a>
        </li>
      ))}
    </ul>
  </nav>
</header>

<style>
  @layer components {
    .glass-header {
      position: sticky;
      top: 0;
      z-index: 50;
      background: var(--glass-mocha);
      backdrop-filter: blur(14px);
      border-bottom: 1px solid color-mix(in oklab, var(--mocha), transparent 82%);
      padding: var(--size-3) var(--size-4);
      
      /* Smooth transitions */
      transition: 
        background-color var(--dur-med) var(--ease-organic),
        backdrop-filter var(--dur-med) var(--ease-organic),
        box-shadow var(--dur-med) var(--ease-organic);
    }

    /* Backdrop-filter fallback */
    @supports not (backdrop-filter: blur(12px)) {
      .glass-header {
        background: var(--glass-fallback-primary);
        border-bottom: 1px solid var(--glass-border);
      }
    }

    .glass-nav {
      max-width: var(--container-max-width);
      margin: 0 auto;
      padding: var(--size-3) var(--container-padding);
    }

    .nav-list {
      display: flex;
      justify-content: center;
      align-items: center;
      gap: var(--size-6);
      
      @media (--mobile-only) {
        gap: var(--size-4);
      }
    }

    .nav-item {
      position: relative;
    }

    .nav-link {
      display: inline-block;
      padding: var(--size-2) var(--size-3);
      font-weight: var(--font-weight-5);
      font-size: var(--font-size-1);
      color: var(--text-dark);
      border-radius: var(--radius-3);
      transition: 
        color var(--dur-fast) var(--ease-organic),
        background-color var(--dur-fast) var(--ease-organic),
        transform var(--dur-fast) var(--ease-organic);
      
      /* Focus styles */
      &:focus-visible {
        outline: 2px solid var(--coral);
        outline-offset: 2px;
      }
      
      /* Hover effects */
      &:hover {
        color: var(--text-dark);
        background: color-mix(in oklab, var(--mocha), transparent 70%);
        box-shadow: 0 0 0 6px color-mix(in oklab, var(--mocha), transparent 90%) inset;
      }
      
      /* Active state */
      &:active {
        transform: scale(0.98);
      }
      
      @media (--mobile-only) {
        padding: var(--size-1) var(--size-2);
        font-size: var(--font-size-0);
      }
    }

    /* Enhanced contrast mode */
    @media (--highContrast) {
      .glass-header {
        background: var(--surface-1);
        border-bottom: 2px solid var(--text-1);
        backdrop-filter: none;
      }
      
      .nav-link {
        border: 1px solid transparent;
        
        &:hover, &:focus-visible {
          border-color: var(--text-1);
          background: var(--surface-2);
        }
      }
    }

    /* Reduced motion preferences */
    @media (--motionNotOK) {
      .glass-header {
        transition: none;
      }
      
      .nav-link {
        transition: none;
        transform: none;
        
        &:hover, &:active {
          transform: none;
        }
      }
    }

    /* Dark mode adjustments */
    @media (--OSdark) {
      .glass-header {
        box-shadow: 0 1px 3px 0 rgb(0 0 0 / 0.3);
      }
    }

    /* Print styles */
    @media print {
      .glass-header {
        position: static;
        background: transparent;
        backdrop-filter: none;
        box-shadow: none;
        border-bottom: 1px solid var(--text-1);
      }
    }
  }
</style>

<script>
  // Progressive enhancement for scroll behavior
  class GlassHeader extends HTMLElement {
    private header: HTMLElement;
    private lastScrollY: number = 0;
    private ticking: boolean = false;

    constructor() {
      super();
      this.header = this.querySelector('.glass-header') as HTMLElement;
      this.init();
    }

    private init(): void {
      if (!this.header) return;

      // Add scroll listener for enhanced effects
      window.addEventListener('scroll', this.handleScroll.bind(this), { passive: true });
      
      // Set initial state
      this.updateHeaderOpacity();
    }

    private handleScroll(): void {
      if (!this.ticking) {
        requestAnimationFrame(() => {
          this.updateHeaderOpacity();
          this.ticking = false;
        });
        this.ticking = true;
      }
    }

    private updateHeaderOpacity(): void {
      const scrollY = window.scrollY;
      const opacity = Math.min(0.95, 0.7 + (scrollY / 300) * 0.25);
      
      // Update CSS custom property for dynamic opacity
      this.header.style.setProperty('--dynamic-opacity', opacity.toString());
      
      this.lastScrollY = scrollY;
    }

    disconnectedCallback(): void {
      window.removeEventListener('scroll', this.handleScroll.bind(this));
    }
  }

  // Only register if custom elements are supported
  if ('customElements' in window) {
    customElements.define('glass-header', GlassHeader);
  }
</script>
